// <auto-generated />
using System;
using ACME_MOTORS.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ACME_MOTORS.Migrations
{
    [DbContext(typeof(AcmeMotorContext))]
    [Migration("20190718102948_321nd-itera")]
    partial class _321nditera
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ACME_MOTORS.Models.BaseTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AmendedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("BaseTable");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseTable");
                });

            modelBuilder.Entity("ACME_MOTORS.Models.CarModel", b =>
                {
                    b.HasBaseType("ACME_MOTORS.Models.BaseTable");

                    b.Property<string>("Color");

                    b.Property<string>("EngineId");

                    b.Property<bool>("HasRustDamage");

                    b.Property<string>("ManufacturerId");

                    b.Property<string>("Model");

                    b.Property<int>("QuantityInStock");

                    b.Property<string>("Year");

                    b.HasDiscriminator().HasValue("CarModel");
                });

            modelBuilder.Entity("ACME_MOTORS.Models.EngineModel", b =>
                {
                    b.HasBaseType("ACME_MOTORS.Models.BaseTable");

                    b.Property<string>("FuelType");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnName("EngineModel_ManufacturerId");

                    b.Property<int>("Mileage");

                    b.Property<string>("Model")
                        .HasColumnName("EngineModel_Model");

                    b.Property<int>("Size");

                    b.Property<string>("Year")
                        .HasColumnName("EngineModel_Year");

                    b.HasDiscriminator().HasValue("EngineModel");
                });

            modelBuilder.Entity("ACME_MOTORS.Models.ManufacturerModel", b =>
                {
                    b.HasBaseType("ACME_MOTORS.Models.BaseTable");

                    b.Property<string>("Name");

                    b.HasDiscriminator().HasValue("ManufacturerModel");
                });

            modelBuilder.Entity("ACME_MOTORS.Models.MotorbikeModel", b =>
                {
                    b.HasBaseType("ACME_MOTORS.Models.BaseTable");

                    b.Property<string>("Color")
                        .HasColumnName("MotorbikeModel_Color");

                    b.Property<string>("EngineId")
                        .HasColumnName("MotorbikeModel_EngineId");

                    b.Property<bool>("HasWindVisor");

                    b.Property<string>("ManufacturerId")
                        .HasColumnName("MotorbikeModel_ManufacturerId");

                    b.Property<string>("Model")
                        .HasColumnName("MotorbikeModel_Model");

                    b.Property<int>("QuantityInStock")
                        .HasColumnName("MotorbikeModel_QuantityInStock");

                    b.Property<string>("Year")
                        .HasColumnName("MotorbikeModel_Year");

                    b.HasDiscriminator().HasValue("MotorbikeModel");
                });

            modelBuilder.Entity("ACME_MOTORS.Models.TruckModel", b =>
                {
                    b.HasBaseType("ACME_MOTORS.Models.BaseTable");

                    b.Property<string>("Color")
                        .HasColumnName("TruckModel_Color");

                    b.Property<string>("EngineId")
                        .HasColumnName("TruckModel_EngineId");

                    b.Property<string>("ManufacturerId")
                        .HasColumnName("TruckModel_ManufacturerId");

                    b.Property<int>("MaximumLoad");

                    b.Property<string>("Model")
                        .HasColumnName("TruckModel_Model");

                    b.Property<string>("NumberOfWheels");

                    b.Property<int>("QuantityInStock")
                        .HasColumnName("TruckModel_QuantityInStock");

                    b.Property<string>("Year")
                        .HasColumnName("TruckModel_Year");

                    b.HasDiscriminator().HasValue("TruckModel");
                });
#pragma warning restore 612, 618
        }
    }
}
